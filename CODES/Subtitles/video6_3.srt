1
00:00:00,350 --> 00:00:02,080
- The next process we have to consider

2
00:00:02,080 --> 00:00:03,580
is directing a project.

3
00:00:03,580 --> 00:00:06,310
And how are we going to tailor
that to work with Agile?

4
00:00:06,310 --> 00:00:07,920
- Well, the first thing
you have to remember

5
00:00:07,920 --> 00:00:10,080
with directing a project is
that we are really going to

6
00:00:10,080 --> 00:00:12,400
be focused on management by exception.

7
00:00:12,400 --> 00:00:14,520
Because we want to empower our teams.

8
00:00:14,520 --> 00:00:16,020
By giving them the empowerment,

9
00:00:16,020 --> 00:00:18,610
we're going to let them start
helping us decide how much

10
00:00:18,610 --> 00:00:21,550
is going to be delivered during
any one sprint or release,

11
00:00:21,550 --> 00:00:23,550
how the information is going to flow,

12
00:00:23,550 --> 00:00:26,690
and we're going to give value
to the things being delivered.

13
00:00:26,690 --> 00:00:29,500
By managing by exception, we're
going to give them tolerances

14
00:00:29,500 --> 00:00:30,790
that they can stay between,

15
00:00:30,790 --> 00:00:33,520
and let them know how they
can flex quality and scope

16
00:00:33,520 --> 00:00:36,810
to make sure they're meeting
our time and cost objectives.

17
00:00:36,810 --> 00:00:37,740
Now, when we start looking

18
00:00:37,740 --> 00:00:40,690
at how we're going to do progress
reporting up to the board,

19
00:00:40,690 --> 00:00:43,200
instead of doing it in
traditional highlight report,

20
00:00:43,200 --> 00:00:45,070
we're going to use more of a pull method.

21
00:00:45,070 --> 00:00:46,250
And they're going to
be able to have access

22
00:00:46,250 --> 00:00:48,100
to our information radiators.

23
00:00:48,100 --> 00:00:51,280
This will allow us to have
less reporting requirements,

24
00:00:51,280 --> 00:00:53,200
while still being able to work faster,

25
00:00:53,200 --> 00:00:55,790
and they're still going to get
the communication they need.

26
00:00:55,790 --> 00:00:57,720
Another thing is anytime
you're doing demos

27
00:00:57,720 --> 00:00:59,940
or you're doing releases,
the project board should

28
00:00:59,940 --> 00:01:02,160
be invited to attend those key demos.

29
00:01:02,160 --> 00:01:05,170
That gives them insight into
the details of the project

30
00:01:05,170 --> 00:01:07,810
while still letting them stay
out of the day-to-day work.

31
00:01:07,810 --> 00:01:10,080
One of the biggest key
things we have to focus on

32
00:01:10,080 --> 00:01:12,560
is collaboration within agile.

33
00:01:12,560 --> 00:01:16,280
And that's no more true than
inside directing a project.

34
00:01:16,280 --> 00:01:17,550
With this collaborative environment,

35
00:01:17,550 --> 00:01:19,160
we have to make sure there is trust.

36
00:01:19,160 --> 00:01:22,150
The project board has to
trust the delivery team.

37
00:01:22,150 --> 00:01:24,530
And they have to eliminate
a culture of blame,

38
00:01:24,530 --> 00:01:26,370
because if there's
something that goes wrong

39
00:01:26,370 --> 00:01:27,830
and the project board goes and says,

40
00:01:27,830 --> 00:01:29,640
oh, it's the delivery team's fault.

41
00:01:29,640 --> 00:01:31,410
That's going to not empower that team

42
00:01:31,410 --> 00:01:32,920
to make decisions in the future.

43
00:01:32,920 --> 00:01:34,820
And that's going to make
them second-guess themself

44
00:01:34,820 --> 00:01:37,920
and always be going back to
the project board for answers.

45
00:01:37,920 --> 00:01:39,800
Which then eliminates the agile

46
00:01:39,800 --> 00:01:41,310
that we're trying to achieve.

47
00:01:41,310 --> 00:01:43,107
So, one of the big
questions you may have is,

48
00:01:43,107 --> 00:01:46,240
who is going to provide the
direction inside the directing

49
00:01:46,240 --> 00:01:47,920
of project process?

50
00:01:47,920 --> 00:01:49,890
Well, it depends on your environment.

51
00:01:49,890 --> 00:01:51,610
If you're in a very mature environment,

52
00:01:51,610 --> 00:01:53,050
you're going to use a project board,

53
00:01:53,050 --> 00:01:55,110
very similar to the way PRINCE2 does.

54
00:01:55,110 --> 00:01:56,680
If you're in a very basic environment,

55
00:01:56,680 --> 00:01:59,270
you just started using
this PRINCE2 agile stuff,

56
00:01:59,270 --> 00:02:01,030
you may just have the product owner,

57
00:02:01,030 --> 00:02:03,180
the one who's going to end up
owning this thing at the end,

58
00:02:03,180 --> 00:02:04,370
give that direction.

59
00:02:04,370 --> 00:02:06,630
And that's a much more
agile way of working.

60
00:02:06,630 --> 00:02:08,960
Now if you're somewhere in
between that, between a basic

61
00:02:08,960 --> 00:02:11,410
and a mature, you're going
to be using the sponsor

62
00:02:11,410 --> 00:02:12,630
to give you that direction.

63
00:02:12,630 --> 00:02:15,420
But again, our goal is to get
you into a mature environment

64
00:02:15,420 --> 00:02:17,020
to get you to using a project board

65
00:02:17,020 --> 00:02:19,836
that gives you overall
governance and control, similar

66
00:02:19,836 --> 00:02:22,710
to PRINCE2, while still
allowing agile ways of working

67
00:02:22,710 --> 00:02:25,340
to happen down at the delivery layer.

68
00:02:25,340 --> 00:02:27,370
One of the biggest
things that the directing

69
00:02:27,370 --> 00:02:30,500
of project process can
do to empower the team,

70
00:02:30,500 --> 00:02:32,690
is give them good requirements.

71
00:02:32,690 --> 00:02:34,670
If you give the team good requirements,

72
00:02:34,670 --> 00:02:37,030
they can then do the work
that they need to do.

73
00:02:37,030 --> 00:02:39,430
This allows self-direction to happen.

74
00:02:39,430 --> 00:02:42,890
These requirements must be
well-defined and well-prioritized

75
00:02:42,890 --> 00:02:44,840
to enable agile ways of working,

76
00:02:44,840 --> 00:02:47,720
because if they're not
well-prioritized, then the team

77
00:02:47,720 --> 00:02:50,310
is not going to know which things
they need to work on first.

78
00:02:50,310 --> 00:02:52,560
And they're going to keep
coming back to the project board

79
00:02:52,560 --> 00:02:54,310
and asking for guidance.

80
00:02:54,310 --> 00:02:57,350
Many terms are going to
describe what a project does

81
00:02:57,350 --> 00:02:58,810
and what it does well.

82
00:02:58,810 --> 00:03:01,830
These are things like
requirements, project descriptions,

83
00:03:01,830 --> 00:03:04,650
or user stories as they're known in agile.

84
00:03:04,650 --> 00:03:05,870
Let's look a little bit more in-depth

85
00:03:05,870 --> 00:03:07,800
into this world of requirements.

86
00:03:07,800 --> 00:03:09,460
When we look at requirements
we want to make sure

87
00:03:09,460 --> 00:03:11,600
we're defining them at the right level.

88
00:03:11,600 --> 00:03:13,700
So if the project board
comes up with a requirement,

89
00:03:13,700 --> 00:03:16,020
that would be a high-level requirement.

90
00:03:16,020 --> 00:03:19,470
Then, it needs to be
broken down and decomposed

91
00:03:19,470 --> 00:03:21,300
into those intermediate objectives.

92
00:03:21,300 --> 00:03:23,460
And that's where the project
manager's going to come in.

93
00:03:23,460 --> 00:03:26,310
They're going to help the
project board take this big idea

94
00:03:26,310 --> 00:03:28,740
and break it down into smaller pieces.

95
00:03:28,740 --> 00:03:31,130
Now, those smaller pieces
still aren't small enough

96
00:03:31,130 --> 00:03:32,240
to be worked on yet.

97
00:03:32,240 --> 00:03:33,210
They're not ready.

98
00:03:33,210 --> 00:03:34,830
So we're going to work
with the team managers

99
00:03:34,830 --> 00:03:37,590
and the delivery team to
break those down even further

100
00:03:37,590 --> 00:03:39,530
into detail-level requirements

101
00:03:39,530 --> 00:03:41,690
that can then be worked against.

102
00:03:41,690 --> 00:03:44,110
Now, this allows the project
team at the end of the day

103
00:03:44,110 --> 00:03:46,510
to look at all of these
different smaller chunks

104
00:03:46,510 --> 00:03:48,310
of requirements and trade out

105
00:03:48,310 --> 00:03:50,730
and swap detailed requirements.

106
00:03:50,730 --> 00:03:51,930
If you change something in one

107
00:03:51,930 --> 00:03:53,020
of these detailed requirements,

108
00:03:53,020 --> 00:03:56,360
it's not going to have a huge
effect on the overall product.

109
00:03:56,360 --> 00:04:00,010
But, it does allow you to
work in a more agile method.

110
00:04:00,010 --> 00:04:01,220
What do I mean by this?

111
00:04:01,220 --> 00:04:04,440
The high-level requirement might
be, we need to build a car.

112
00:04:04,440 --> 00:04:06,370
The intermediate-level
requirement might be,

113
00:04:06,370 --> 00:04:08,810
we need to build a four-seat car.

114
00:04:08,810 --> 00:04:12,120
The detailed requirement might
be, the seats must be able

115
00:04:12,120 --> 00:04:15,430
to recline to 45 degrees,
they must be heated,

116
00:04:15,430 --> 00:04:18,100
they must have this or
that or the other thing.

117
00:04:18,100 --> 00:04:19,840
Now if I change out some
of those requirements,

118
00:04:19,840 --> 00:04:23,090
does it effectively
change the big high-value

119
00:04:23,090 --> 00:04:25,790
or high-level product, the car?

120
00:04:25,790 --> 00:04:26,623
No.

121
00:04:26,623 --> 00:04:27,830
It's still going to be a car,

122
00:04:27,830 --> 00:04:29,990
it just may be a different color seat,

123
00:04:29,990 --> 00:04:31,910
or may be a different fabric in the seat.

124
00:04:31,910 --> 00:04:34,740
And those details can be
swapped in and out as needed

125
00:04:34,740 --> 00:04:37,530
by the agile team delivering the work.

126
00:04:37,530 --> 00:04:39,240
Now when we develop our requirements,

127
00:04:39,240 --> 00:04:42,380
we use user stories inside of agile.

128
00:04:42,380 --> 00:04:44,700
This works to give us the function

129
00:04:44,700 --> 00:04:46,560
and the output we're expecting.

130
00:04:46,560 --> 00:04:50,750
Usually they're in the form of,
as a blank, I want to blank,

131
00:04:50,750 --> 00:04:52,840
so that I can blank, right?

132
00:04:52,840 --> 00:04:56,550
So example of this
might be, as a consumer,

133
00:04:56,550 --> 00:04:59,310
I want to be able to buy groceries online,

134
00:04:59,310 --> 00:05:01,890
so that I don't have to leave the house.

135
00:05:01,890 --> 00:05:05,490
That might be a description
of a grocery delivery service.

136
00:05:05,490 --> 00:05:07,180
Now that's a really big description

137
00:05:07,180 --> 00:05:09,310
and it doesn't give us
detailed requirements.

138
00:05:09,310 --> 00:05:11,500
Instead, this might be an epic.

139
00:05:11,500 --> 00:05:14,220
An epic is these big, broad user stories

140
00:05:14,220 --> 00:05:17,410
that need to be decomposed
down to smaller pieces.

141
00:05:17,410 --> 00:05:20,970
And so for that overall
concept that I gave,

142
00:05:20,970 --> 00:05:23,500
a consumer who wants to be
able to buy groceries online,

143
00:05:23,500 --> 00:05:25,130
so that they don't have
to leave the house,

144
00:05:25,130 --> 00:05:27,290
there's a lot of things
we can break down in that.

145
00:05:27,290 --> 00:05:30,170
We can break down to, how is
that going to be checked out?

146
00:05:30,170 --> 00:05:31,670
How are we going to process payment?

147
00:05:31,670 --> 00:05:33,000
How am I going to place the order?

148
00:05:33,000 --> 00:05:34,990
Is it online or over the phone?

149
00:05:34,990 --> 00:05:36,300
Am I going to use an app?

150
00:05:36,300 --> 00:05:37,670
All those things have to be defined

151
00:05:37,670 --> 00:05:40,800
and we'll break those down
into individual user stories.

152
00:05:40,800 --> 00:05:42,510
Additional information might include

153
00:05:42,510 --> 00:05:45,330
the acceptance criteria, the
amount of effort involved,

154
00:05:45,330 --> 00:05:47,620
and the value for that particular thing.

155
00:05:47,620 --> 00:05:49,820
So if I'm talking about, as a user,

156
00:05:49,820 --> 00:05:52,240
I want to be able to
delete items from my cart,

157
00:05:52,240 --> 00:05:55,490
so that I don't buy additional
products I don't want.

158
00:05:55,490 --> 00:05:58,660
That is a clearer area
in a smaller, user story

159
00:05:58,660 --> 00:06:01,320
to the larger, grocery delivery system.

160
00:06:01,320 --> 00:06:02,560
This is going to be a starting point

161
00:06:02,560 --> 00:06:04,670
and it is not a fully-defined requirement.

162
00:06:04,670 --> 00:06:07,320
We're going to continue to
refine these until they're ready,

163
00:06:07,320 --> 00:06:09,040
and once they're in the ready bucket,

164
00:06:09,040 --> 00:06:12,070
then we can start working
and building towards those.

165
00:06:12,070 --> 00:06:13,580
So, to drive this point home,

166
00:06:13,580 --> 00:06:15,630
let's look at two more user stories.

167
00:06:15,630 --> 00:06:18,250
The first one is one that
has very limited usefulness

168
00:06:18,250 --> 00:06:19,960
because it's too generic.

169
00:06:19,960 --> 00:06:22,710
As a store manager, I
want to manage a store,

170
00:06:22,710 --> 00:06:25,330
so that the store is managed effectively.

171
00:06:25,330 --> 00:06:26,610
This doesn't really help me much.

172
00:06:26,610 --> 00:06:28,770
It doesn't tell me what
they really want to do.

173
00:06:28,770 --> 00:06:31,940
And it takes a lot of skill
to write a good user story.

174
00:06:31,940 --> 00:06:34,680
Let's go to rework this
at a more granular level.

175
00:06:34,680 --> 00:06:36,570
Here is number 37.

176
00:06:36,570 --> 00:06:39,400
It's a good user story, we're
going to use this as an example.

177
00:06:39,400 --> 00:06:42,330
As a stock controller, I want
to know if my stock level

178
00:06:42,330 --> 00:06:45,490
is very low, so that I don't
run out and I don't fail

179
00:06:45,490 --> 00:06:47,250
to fulfill a customer's order.

180
00:06:47,250 --> 00:06:49,360
You'll notice here that
it is very specific.

181
00:06:49,360 --> 00:06:51,200
What do they want to achieve?

182
00:06:51,200 --> 00:06:53,220
And what is the thing they need to know?

183
00:06:53,220 --> 00:06:55,800
Now I can develop a program
that meets that need,

184
00:06:55,800 --> 00:06:57,610
that manages the stock.

185
00:06:57,610 --> 00:07:00,010
You'll also notice at the bottom,
we have the business value

186
00:07:00,010 --> 00:07:01,410
and the effort involved.

187
00:07:01,410 --> 00:07:02,730
The business value of eight,

188
00:07:02,730 --> 00:07:05,860
says that it's 8 out of 10
on the business value scale.

189
00:07:05,860 --> 00:07:08,020
This is something that's
going to help us decide

190
00:07:08,020 --> 00:07:10,310
what priority it is when
we need to work on it.

191
00:07:10,310 --> 00:07:12,220
Things that are higher
value should get worked on

192
00:07:12,220 --> 00:07:14,010
before things that are lower value.

193
00:07:14,010 --> 00:07:15,270
We also have effort here.

194
00:07:15,270 --> 00:07:17,210
It's a 2 our of 10 on effort.

195
00:07:17,210 --> 00:07:19,580
This tells me that it
is a lower effort item.

196
00:07:19,580 --> 00:07:20,730
So it won't take me very long

197
00:07:20,730 --> 00:07:22,330
to build this part of the code.

198
00:07:22,330 --> 00:07:23,650
If this was a 9 or a 10,

199
00:07:23,650 --> 00:07:25,500
that means it's going
to take a lot more time

200
00:07:25,500 --> 00:07:26,980
and a lot more resources.

201
00:07:26,980 --> 00:07:29,130
And so, by going through
these user stories

202
00:07:29,130 --> 00:07:32,520
and defining them well, you
can see that this one is ready.

203
00:07:32,520 --> 00:07:33,860
We can put it in the ready bucket

204
00:07:33,860 --> 00:07:36,770
and the team can start working
towards it in the next sprint

205
00:07:36,770 --> 00:07:38,430
to get it built, and then we get something

206
00:07:38,430 --> 00:07:39,890
that the customer can use.

207
00:07:39,890 --> 00:07:41,470
Now when I look at epics,

208
00:07:41,470 --> 00:07:45,000
epics instead are going
to be a bigger user story

209
00:07:45,000 --> 00:07:46,060
and these are your boulders,

210
00:07:46,060 --> 00:07:47,450
these are your big requirements.

211
00:07:47,450 --> 00:07:49,540
This is the overarching thing.

212
00:07:49,540 --> 00:07:51,180
But they're not ready to be worked against

213
00:07:51,180 --> 00:07:52,740
because they're not technical enough,

214
00:07:52,740 --> 00:07:54,310
they're not functional enough.

215
00:07:54,310 --> 00:07:57,830
And so we need to break down
these epics into smaller pieces

216
00:07:57,830 --> 00:07:59,960
so that we can have a good user story

217
00:07:59,960 --> 00:08:01,380
that we can build against.

218
00:08:01,380 --> 00:08:03,410
And that's just the idea
of a requirement, right?

219
00:08:03,410 --> 00:08:05,200
You take this big-level requirement,

220
00:08:05,200 --> 00:08:06,940
you break it down into
a smaller requirement,

221
00:08:06,940 --> 00:08:07,773
and then you break that

222
00:08:07,773 --> 00:08:10,040
into a much more detailed
smaller requirement.

223
00:08:10,040 --> 00:08:12,100
And when we get to that
lowest-level requirement,

224
00:08:12,100 --> 00:08:13,700
that very detailed requirement,

225
00:08:13,700 --> 00:08:15,110
that's what we can build against.

226
00:08:15,110 --> 00:08:17,430
That's somebody building
something in a product line.

227
00:08:17,430 --> 00:08:19,000
And that's what we're
trying to get to here

228
00:08:19,000 --> 00:08:20,610
inside directing a project.

229
00:08:20,610 --> 00:08:22,760
And so, for the exam
I want you to remember

230
00:08:22,760 --> 00:08:25,940
that epics are these big,
high-level requirements.

231
00:08:25,940 --> 00:08:28,800
And user stories are smaller,
more detailed requirements

232
00:08:28,800 --> 00:08:30,360
underneath these epics.

233
00:08:30,360 --> 00:08:31,970
Now, the last thing we have to talk

234
00:08:31,970 --> 00:08:33,680
about inside directing a project,

235
00:08:33,680 --> 00:08:35,950
is the idea of prioritization.

236
00:08:35,950 --> 00:08:38,440
How are we going to
prioritize what requirements

237
00:08:38,440 --> 00:08:41,310
and what user stories
should be worked on first?

238
00:08:41,310 --> 00:08:44,060
There's two basic methods
that we use inside agile.

239
00:08:44,060 --> 00:08:47,190
One is known as MoSCoW
and the other is ordering.

240
00:08:47,190 --> 00:08:51,110
MoSCoW stands for Must have,
Should have, Could have,

241
00:08:51,110 --> 00:08:52,410
and Won't have for now.

242
00:08:52,410 --> 00:08:53,790
Let's look at a big requirement.

243
00:08:53,790 --> 00:08:57,390
I have a requirement to have
a pen that my company can use.

244
00:08:57,390 --> 00:08:59,910
So I can make information from my head

245
00:08:59,910 --> 00:09:01,310
and write it down on the paper.

246
00:09:01,310 --> 00:09:03,900
That is a big, overarching epic.

247
00:09:03,900 --> 00:09:06,300
Now if I want to break that
down, what are the requirements

248
00:09:06,300 --> 00:09:07,850
that I might have for that pen?

249
00:09:07,850 --> 00:09:10,230
Well, do I need to have a pen cap?

250
00:09:10,230 --> 00:09:11,780
Do I need to have ink?

251
00:09:11,780 --> 00:09:13,800
Do I need to have a
barrel so you can hold it?

252
00:09:13,800 --> 00:09:15,620
Do I have to have a logo on the pen?

253
00:09:15,620 --> 00:09:17,240
These are all things we can think about.

254
00:09:17,240 --> 00:09:19,730
Now as we go through the
prioritization as the project board

255
00:09:19,730 --> 00:09:22,270
we're going to look at this
and go, okay, I need a pen.

256
00:09:22,270 --> 00:09:24,680
That means it has to have
ink, that's a Must have.

257
00:09:24,680 --> 00:09:26,400
I need to be able to refill that ink.

258
00:09:26,400 --> 00:09:28,740
It Should have a barrel,
some way to hold that ink

259
00:09:28,740 --> 00:09:29,940
inside of it.

260
00:09:29,940 --> 00:09:31,980
Now it Won't have a logo

261
00:09:31,980 --> 00:09:33,870
because we're not going to be
giving these out to customers.

262
00:09:33,870 --> 00:09:35,880
Instead, we're going to
just use them in house.

263
00:09:35,880 --> 00:09:38,850
And it Could have a top,
something to cover up the pen.

264
00:09:38,850 --> 00:09:41,020
But if it doesn't, that's okay, too.

265
00:09:41,020 --> 00:09:43,980
And so these are the ideas
here, is what Must it have,

266
00:09:43,980 --> 00:09:45,840
what Should it have, what Could it have,

267
00:09:45,840 --> 00:09:47,210
and what Won't it have.

268
00:09:47,210 --> 00:09:50,330
All those Must haves are
your minimum viable product.

269
00:09:50,330 --> 00:09:53,990
Your Should haves are better
than that, they're nice to have

270
00:09:53,990 --> 00:09:55,510
but they're not necessary.

271
00:09:55,510 --> 00:09:57,370
And then you have a layer even above that,

272
00:09:57,370 --> 00:09:58,440
called your Could haves.

273
00:09:58,440 --> 00:09:59,760
It Could have a top.

274
00:09:59,760 --> 00:10:01,960
But, if we don't have a
top, I can still use the pen

275
00:10:01,960 --> 00:10:03,460
and still write down stuff.

276
00:10:03,460 --> 00:10:04,580
And then things that you just say,

277
00:10:04,580 --> 00:10:06,410
you know what, we don't
need that right now,

278
00:10:06,410 --> 00:10:07,710
we're not going to have a logo on it

279
00:10:07,710 --> 00:10:10,040
'cause we don't need the
extra expense of printing it

280
00:10:10,040 --> 00:10:12,100
if it's just going to be
used inside the office.

281
00:10:12,100 --> 00:10:14,610
And that's the idea of how
you break these big epics

282
00:10:14,610 --> 00:10:17,810
down into smaller stories,
and then decide which ones

283
00:10:17,810 --> 00:10:20,060
you Must have, you Should
have, you Could have,

284
00:10:20,060 --> 00:10:21,360
or you Won't have.

285
00:10:21,360 --> 00:10:24,370
The second method of
prioritization is called ordering.

286
00:10:24,370 --> 00:10:27,490
And in ordering, we're going to
just give a number to things.

287
00:10:27,490 --> 00:10:29,120
So if I look at all of the requirements

288
00:10:29,120 --> 00:10:31,690
and I have 10 different
requirements, I will number them

289
00:10:31,690 --> 00:10:33,220
from 1 to 10.

290
00:10:33,220 --> 00:10:36,340
And what will happen is
our workflow should be done

291
00:10:36,340 --> 00:10:38,780
in the order from first to last.

292
00:10:38,780 --> 00:10:41,840
Now, sometimes we're going to
pull things in different orders

293
00:10:41,840 --> 00:10:43,860
though, based on the capacity of the team,

294
00:10:43,860 --> 00:10:45,490
and working in our agile way.

295
00:10:45,490 --> 00:10:48,300
So if you're working with
ordering, it is better to do this

296
00:10:48,300 --> 00:10:50,970
when you have little
dependency between items.

297
00:10:50,970 --> 00:10:54,210
If I go back to my car example,
I don't want to put the seats

298
00:10:54,210 --> 00:10:56,470
in the car before I've built the chassis.

299
00:10:56,470 --> 00:10:58,110
I don't want to paint
the exterior of the car,

300
00:10:58,110 --> 00:10:59,680
until I've bolted everything on.

301
00:10:59,680 --> 00:11:03,730
And so using it in an ordering
system sometimes doesn't work

302
00:11:03,730 --> 00:11:06,760
as well as the Must have,
Should have, Can't have

303
00:11:06,760 --> 00:11:09,420
and Won't have, because if you
can pull all the Must haves

304
00:11:09,420 --> 00:11:11,900
and build those first,
that is going to be better

305
00:11:11,900 --> 00:11:13,820
for your particular sprint
to make sure all those things

306
00:11:13,820 --> 00:11:16,300
are done in the right
order, in the right time.

307
00:11:16,300 --> 00:11:17,480
When you deal with ordering,

308
00:11:17,480 --> 00:11:20,120
it just says this is my
priority from 1 to 10.

309
00:11:20,120 --> 00:11:22,570
But again, the agile team can
decide that they're going to do

310
00:11:22,570 --> 00:11:25,150
item 3 before item 1, if they want to.

311
00:11:25,150 --> 00:11:27,930
And so that is just a priority system

312
00:11:27,930 --> 00:11:30,470
when you talk about ordering, not in layer

313
00:11:30,470 --> 00:11:31,980
of when you're going to do each thing

314
00:11:31,980 --> 00:11:33,480
as you go through the project.

